// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Park {
  id                    String     @id @default(cuid())
  name                  String
  nameJapanese          String
  address               String
  addressJapanese       String
  googleMapLink         String
  mainImage             String
  type                  ParkType?
  price                 String
  additionalInformation String     @default("")
  published             Boolean    @default(false)
  user                  User?      @relation(fields: [userId], references: [id])
  userId                String?
  reviews               Review[]
  parkHours             ParkHours?
}

enum ParkType {
  OUTDOOR
  INDOOR
  BOTH
}

model Review {
  id      String  @id @default(cuid())
  comment String?
  rating  Int
  park    Park?   @relation(fields: [parkId], references: [id])
  parkId  String?
  user    User?   @relation(fields: [userId], references: [id])
  userId  String?
}

model ParkHours {
  id        String @id @default(cuid())
  monday    String
  tuesday   String
  wednesday String
  thursday  String
  friday    String
  saturday  String
  sunday    String
  extra     String
  park      Park   @relation(fields: [parkId], references: [id], onDelete: Cascade)
  parkId    String @unique
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  role          Role      @default(USER)
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  parks         Park[]
  reviews       Review[]
  accounts      Account[]
  sessions      Session[]
  dogs          Dog[]
}

model Dog {
  id        String  @id @default(cuid())
  name      String
  breed     String?
  birthdate String?
  image     String?
  User      User?   @relation(fields: [userId], references: [id])
  userId    String?
}

enum Role {
  ADMIN
  USER
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
